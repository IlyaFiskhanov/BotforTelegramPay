import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ParseMode
from config import TOKEN,PAYMENTS_TOKEN,YOUR_TELEGRAM_USER_ID,NUMBERS_FILE,USERS_FILE,DATABASE_FILE
from utils import find_user_in_database,get_next_number,save_username_with_number,can_make_payment,update_json_database,has_active_subscription,get_next_payment_date
from datetime import datetime, timedelta 
from aiogram import types
from aiogram.types.message import ContentType
from aiogram.utils import executor
from aiogram import Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ParseMode
import json
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=1000 * 100) # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram
async def send_notification_to_admin(message):
    try:
        await bot.send_message(YOUR_TELEGRAM_USER_ID, message)
    except Exception as e:
        logging.error(f"Error sending notification: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message ="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–•–æ–º—è—á—å—è –ë–∞–Ω–¥–∞üòè - —ç—Ç–æ —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.\n–ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç–∞–º –æ—Ç –ê–ª–µ–∫—Å–µ—è.\n–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—ã, –≤–µ–¥–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞."
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    subscribe_button = KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add(subscribe_button)

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await msg.answer(welcome_message, reply_markup=markup)
    await bot.send_sticker(msg.from_user.id, "CAACAgIAAxkBAAEKfwNlJSdEb1l8KF8paILuf79oSoGuiQACSw0AAuw46ErDY7mJkZCxJTAE")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –∫–æ–º–∞–Ω–¥—É /buy
    help_message = "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n–Ω–∞–∂–º–∏—Ç–µ /buy –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'"
    await msg.answer(help_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
@dp.message_handler(commands=['buy'], content_types=types.ContentType.TEXT)
@dp.message_handler(lambda message: message.text.lower() == '–æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def buy(msg: types.Message):
    username = msg.from_user.username

    if has_active_subscription(username):
        await bot.send_message(msg.from_user.id, "–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.")
    else:
        if not can_make_payment(username):
            await bot.send_message(msg.from_user.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–ª–æ 30 –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã.")
        else:
            await bot.send_invoice(msg.from_user.id,
                                   title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
                                   description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 1 –º–µ—Å—è—Ü",
                                   provider_token=PAYMENTS_TOKEN,
                                   currency="rub",
                                   photo_url = "https://i.ibb.co/g4h3NY2/image.png",
                                   photo_height=512,
                                   photo_width=512,
                                   photo_size=512,
                                   is_flexible=False,
                                   prices=[PRICE],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PreCheckoutQuery
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(msg: types.Message):
    payment_info = msg.successful_payment.to_python()
    total_amount = payment_info.get("total_amount", 0)
    currency = payment_info.get("currency", "")

    next_number = get_next_number()
    username = msg.from_user.username

    if next_number:
        save_username_with_number(next_number, username)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with open(DATABASE_FILE, "r") as file:
            database = json.load(file)

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_entry = find_user_in_database(username, database)

        if user_entry:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_entry.update({
                "number": next_number,
                "payment_amount": total_amount,
                "currency": currency
            })
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_entry = {
                "username": username,
                "number": next_number,
                "payment_amount": total_amount,
                "currency": currency,
                "payment_date": "",
                "next_payment_date": ""
            }

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        now = datetime.now()
        payment_date = now.strftime("%Y-%m-%d %H:%M:%S")
        user_entry["payment_date"] = payment_date

        next_payment_date = (now + timedelta(seconds=30)).strftime("%Y-%m-%d %H:%M:%S")
        user_entry["next_payment_date"] = next_payment_date

        if not find_user_in_database(username, database):
            database.append(user_entry)

        with open(DATABASE_FILE, "w") as file:
            json.dump(database, file, indent=4)

        message_text = (
            f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {total_amount // 100} {currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä: <code>{next_number}</code>\n"
            f"–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: {next_payment_date}" 

        )

        await bot.send_message(
            msg.from_user.id,
            message_text,
            parse_mode=ParseMode.HTML
        )

        await send_notification_to_admin(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –ù–æ–º–µ—Ä: {next_number}")
    else:
        await bot.send_message(msg.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–º–µ—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)

